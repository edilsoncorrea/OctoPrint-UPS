#!/usr/bin/env python3
# Script para testar as fun√ß√µes de salvamento e recupera√ß√£o de posi√ß√£o

import sys
import os
import json

# Adiciona o diret√≥rio do plugin ao path
plugin_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, plugin_dir)

print("üîß Testando fun√ß√µes de salvamento de posi√ß√£o...")

try:
    from octoprint_ups import UPS
    
    # Instancia o plugin
    plugin = UPS()
    
    # Simula dados de uma impress√£o
    print("\nüìã Simulando estado de impress√£o...")
    plugin._saved_print_file = "test_print.gcode"
    plugin._saved_print_progress = 65.5
    plugin._saved_file_position = 12345
    plugin._saved_line_number = 456
    plugin._saved_coordinates = {'x': 125.5, 'y': 98.3, 'z': 15.7, 'e': 234.1}
    plugin._saved_extruder_temp = 210
    plugin._saved_bed_temp = 60
    plugin._print_state_saved = True
    
    print("‚úÖ Estado simulado configurado")
    
    # Testa salvamento em arquivo
    print("\nüíæ Testando salvamento em arquivo...")
    try:
        plugin._save_state_to_file()
        print("‚úÖ Salvamento em arquivo executado")
        
        # Verifica se o arquivo foi criado
        state_file = os.path.join(plugin_dir, 'octoprint_ups', 'print_state.json')
        # Como n√£o temos acesso ao m√©todo get_plugin_data_folder, vamos verificar na pasta atual
        possible_files = [
            'print_state.json',
            os.path.join('octoprint_ups', 'print_state.json'),
            os.path.join(plugin_dir, 'print_state.json')
        ]
        
        file_found = False
        for test_file in possible_files:
            if os.path.exists(test_file):
                print(f"‚úÖ Arquivo de estado encontrado: {test_file}")
                # L√™ e verifica o conte√∫do
                with open(test_file, 'r') as f:
                    saved_data = json.load(f)
                print(f"üìÑ Conte√∫do salvo:")
                for key, value in saved_data.items():
                    print(f"   {key}: {value}")
                file_found = True
                break
        
        if not file_found:
            print("‚ö†Ô∏è  Arquivo de estado n√£o encontrado (normal se get_plugin_data_folder n√£o est√° dispon√≠vel)")
            
    except Exception as e:
        print(f"‚ö†Ô∏è  Erro no salvamento (normal fora do OctoPrint): {e}")
    
    # Testa cria√ß√£o de G-code de recupera√ß√£o
    print("\nüîß Testando cria√ß√£o de G-code de recupera√ß√£o...")
    try:
        recovery_commands = plugin._create_recovery_gcode()
        print(f"‚úÖ {len(recovery_commands)} comandos de recupera√ß√£o criados")
        
        print("üìã Primeiros 10 comandos:")
        for i, cmd in enumerate(recovery_commands[:10]):
            print(f"   {i+1:2d}: {cmd}")
        
        if len(recovery_commands) > 10:
            print(f"   ... e mais {len(recovery_commands) - 10} comandos")
        
        # Verifica comandos espec√≠ficos importantes
        important_checks = [
            ("G28", "Home dos eixos"),
            ("M104", "Aquecimento extrusor"),
            ("M140", "Aquecimento mesa"),
            ("G1 X125.5", "Posicionamento X correto"),
            ("G1 Y98.3", "Posicionamento Y correto"),
            ("G1 Z15.7", "Posicionamento Z correto")
        ]
        
        print("\nüîç Verificando comandos importantes:")
        for check_cmd, description in important_checks:
            found = any(check_cmd in cmd for cmd in recovery_commands)
            status = "‚úÖ" if found else "‚ùå"
            print(f"   {status} {description}: {'OK' if found else 'N√ÉO ENCONTRADO'}")
        
    except Exception as e:
        print(f"‚ùå Erro na cria√ß√£o de G-code: {e}")
    
    # Testa limpeza do estado
    print("\nüßπ Testando limpeza do estado...")
    try:
        plugin._clear_saved_state()
        print("‚úÖ Limpeza de estado executada")
        
        # Verifica se as vari√°veis foram limpas
        checks = [
            (plugin._print_state_saved, False, "Estado salvo limpo"),
            (plugin._saved_print_file, None, "Arquivo limpo"),
            (plugin._saved_print_progress, 0, "Progresso limpo"),
            (plugin._saved_line_number, 0, "N√∫mero da linha limpo")
        ]
        
        for value, expected, description in checks:
            status = "‚úÖ" if value == expected else "‚ùå"
            print(f"   {status} {description}: {value} (esperado: {expected})")
            
    except Exception as e:
        print(f"‚ùå Erro na limpeza: {e}")
    
    print("\nüéØ RESUMO DOS RECURSOS DE SALVAMENTO DE POSI√á√ÉO:")
    print("‚úÖ Salva arquivo de impress√£o e progresso")
    print("‚úÖ Salva posi√ß√£o no arquivo (bytes) e linha estimada")
    print("‚úÖ Salva coordenadas f√≠sicas do cabe√ßote (X, Y, Z, E)")
    print("‚úÖ Salva temperaturas do extrusor e mesa")
    print("‚úÖ Gera G-code para recupera√ß√£o autom√°tica:")
    print("   ‚Ä¢ Home dos eixos")
    print("   ‚Ä¢ Aquecimento das temperaturas salvas")
    print("   ‚Ä¢ Posicionamento exato nas coordenadas salvas")
    print("   ‚Ä¢ Purga do extrusor")
    print("   ‚Ä¢ Instru√ß√µes para o usu√°rio")
    print("‚úÖ Persist√™ncia em arquivo JSON")
    print("‚úÖ Carregamento autom√°tico ap√≥s reconex√£o")
    print("‚úÖ APIs para controle manual")
    
    print("\nüìù INSTRU√á√ïES DE USO:")
    print("1. O plugin salva automaticamente o estado quando:")
    print("   ‚Ä¢ UPS entra em bateria cr√≠tica")
    print("   ‚Ä¢ Impress√£o √© pausada")
    print("   ‚Ä¢ Temperatura do hotend ‚â§ limite configurado")
    
    print("\n2. Ap√≥s reconex√£o da impressora:")
    print("   ‚Ä¢ Estado √© carregado automaticamente")
    print("   ‚Ä¢ Oferta recupera√ß√£o via API ou interface")
    print("   ‚Ä¢ G-code de recupera√ß√£o posiciona cabe√ßote exatamente onde parou")
    
    print("\n3. Para uso manual:")
    print("   ‚Ä¢ GET /api/plugin/ups?command=get_recovery_info")
    print("   ‚Ä¢ POST /api/plugin/ups com command='start_recovery'")
    print("   ‚Ä¢ POST /api/plugin/ups com command='clear_recovery'")

except ImportError as e:
    print(f"‚ùå Erro ao importar plugin: {e}")
except Exception as e:
    print(f"‚ùå Erro durante teste: {e}")
